import React, { useState, useEffect } from 'react';
import { View, Text, TouchableOpacity, StyleSheet, ScrollView, Image } from 'react-native';
import firestore from "@react-native-firebase/firestore";

const BookmarkTab = ({ navigation }) => {
  const [bookmarkedRecipes, setBookmarkedRecipes] = useState([]);

  useEffect(() => {

        // 여기서 userId를 설정해야 합니다.
        const userId = 'xxvkRzKqFcWLVx4hWCM8GgQf1hE3';
        fetchBookmarkedRecipes(userId);
      }, []);
  
      
    const fetchBookmarkedRecipes = async (userId) => {
      try {
        const userId = 'xxvkRzKqFcWLVx4hWCM8GgQf1hE3';
        const userRef = firestore().collection('users').doc(userId);
        const snapshot = await userRef.get();
        if (!snapshot.exists) {
          throw new Error("사용자가 존재하지 않습니다.");
        }
        const userBookmarkData = snapshot.data();
        const userBookmarked = userBookmarkData.user_bookmark.join(',');
        const userBookmarkStr = userBookmarked.split(',');
        console.log(userBookmarkStr);

    let fetchedRecipes = [];
    for (const docName of userBookmarkStr) {
      const recipeRef = firestore().collection('recipes').doc(docName);
      const recipeSnapshot = await recipeRef.get();
      if (recipeSnapshot.exists) {
        const recipeData = recipeSnapshot.data();
        const recipeContents = {
          id: docName,
          name: recipeData.recipe_name,
          image: recipeData.recipe_image,
          time: recipeData.recipe_time,
        };
        fetchedRecipes.push(recipeContents);
        console.log(recipeData.recipe_name);
        console.log(recipeData.recipe_time);
      } else {
        console.warn(`레시피 문서 "${docName}"을(를) 찾을 수 없습니다.`);
      }
    }
    

    setBookmarkedRecipes(fetchedRecipes);
      } catch (error) {
        console.error('북마크 레시피를 가져오는데 실패했습니다.', error);
      }
    };


  return (
    <ScrollView style={styles.container}>
      <View>
        {/* Display your bookmarked recipes here */}
        {bookmarkedRecipes.map((recipe) => (
          <TouchableOpacity
            key={recipe.id}
            style={styles.post}
            onPress={() => navigation.navigate('RecipeDetail', { recipeId: recipe.id })}>
            <Image source={{ uri: recipe.image }} style={{ width: 118, height: 66, left: 12, top: 11, borderRadius: 7 }} />
            <Text style={styles.foodText}>{recipe.name}</Text>
            <View style={{ left: 12, top: 15 }}>
            </View>
            <Text style={styles.timeText}>
              {recipe.time[0] !== 0 && `${recipe.time[0]} 시간 `}
              {recipe.time[1] !== 0 && `${recipe.time[1]} 분`}
            </Text>
          </TouchableOpacity>
        ))}
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    backgroundColor: '#F8F9FA', // 배경색상 추가
    height: 'auto',
  },
  containerScroll: {
    top: 90,
    backgroundColor: '#F8F9FA', // 배경색상 추가
    height: 'auto',
    marginBottom: 170,
  },
  cont: {
    flexDirection: 'row',
    justifyContent: 'center',
    flexWrap: 'wrap',
  },
  post: {
    position: 'relative',
    width: 141,
    height: 154,
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    paddingVertical: 3,
    alignContent: 'flex-start',
    shadowColor: "#000000",
    shadowOffset: {
      width: 10,
      height: 10,
    },
    shadowOpacity: 0.25,
    shadowRadius: 10,
    elevation: 5,
  },
  foodText: {
    top: 14,
    paddingLeft: 12,
    fontWeight: 'bold',
  },
  lackingText: {
    paddingLeft: 2,
    bottom: 7,
    color: '#E50000',
    fontSize: 10,
    fontFamily: 'NanumGothic',
  },
  timeText: {
    paddingLeft: 10,
    top: 10,
    color: '#000',
    fontSize: 12,
    margin: 5,
    fontFamily: 'NanumGothic',
  },
  row: {
    flexDirection: 'row',
    display: 'flex',
    flexWrap: 'wrap',
    justifyContent: 'space-around',
    position: 'relative',
    paddingHorizontal: 40,
    paddingBottom: 80,
    margin: 20,
  },
});

export default BookmarkTab;
